{"ast":null,"code":"var _jsxFileName = \"E:\\\\Cuvette\\\\ReactModuleTestH\\\\noteapp\\\\src\\\\pages\\\\Notes.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Notesadder from '../components/Notesadder';\nimport Popup from '../components/Popup';\nimport Sidebar from '../components/Sidebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Notes() {\n  _s();\n  const [storedData, setStoredData] = useState(null);\n  const [selectedX, setSelectedX] = useState({\n    x: \"\",\n    y: \"\"\n  });\n  const [showPopup, setShowPopup] = useState(false);\n  const handleNoteSelection = ({\n    x,\n    y\n  }) => {\n    setSelectedX({\n      x,\n      y\n    });\n  };\n  const handleFormSubmit = ({\n    groupName,\n    selectedColor\n  }) => {\n    setStoredData({\n      groupName,\n      selectedColor\n    });\n  };\n  const handletoggle = () => {\n    setShowPopup(!showPopup);\n  };\n  useEffect(() => {\n    const storedNoteInfo = localStorage.getItem(\"NoteInfo\");\n    if (storedNoteInfo == null) {\n      // \"NotesInfo\" is not empty, so show the Popup\n      setShowPopup(true);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainbody\",\n    children: [showPopup && /*#__PURE__*/_jsxDEV(Popup, {\n      onFormSubmit: handleFormSubmit,\n      togglepops: handletoggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n      storedData: {\n        storedData\n      },\n      onDataClick: handleNoteSelection,\n      togglepop: handletoggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notesadder, {\n      selectedX: selectedX\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(Notes, \"f10cdAh5tpXoMQDhPMSybnQJ4hM=\");\n_c = Notes;\nexport default Notes;\nvar _c;\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"names":["React","useState","useEffect","Notesadder","Popup","Sidebar","jsxDEV","_jsxDEV","Notes","_s","storedData","setStoredData","selectedX","setSelectedX","x","y","showPopup","setShowPopup","handleNoteSelection","handleFormSubmit","groupName","selectedColor","handletoggle","storedNoteInfo","localStorage","getItem","className","children","onFormSubmit","togglepops","fileName","_jsxFileName","lineNumber","columnNumber","onDataClick","togglepop","_c","$RefreshReg$"],"sources":["E:/Cuvette/ReactModuleTestH/noteapp/src/pages/Notes.jsx"],"sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport Notesadder from '../components/Notesadder';\r\nimport Popup from '../components/Popup';\r\nimport Sidebar from '../components/Sidebar';\r\n\r\nfunction Notes() {\r\n  const [storedData, setStoredData] = useState(null);\r\n  const [selectedX, setSelectedX] = useState({ x: \"\", y: \"\" });\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const handleNoteSelection = ({ x, y }) => {\r\n    setSelectedX({ x, y });\r\n  };\r\n\r\n  const handleFormSubmit = ({ groupName, selectedColor }) => {\r\n    setStoredData({ groupName, selectedColor });\r\n  };\r\n  const handletoggle = () => {\r\n    \r\n    setShowPopup(!showPopup);\r\n  };\r\n  useEffect(() => {\r\n    const storedNoteInfo = localStorage.getItem(\"NoteInfo\");\r\n\r\n    if (storedNoteInfo == null) {\r\n      // \"NotesInfo\" is not empty, so show the Popup\r\n      setShowPopup(true);\r\n    }\r\n  }, []);\r\n  return (\r\n    <div className='mainbody'>\r\n      {showPopup && <Popup onFormSubmit={handleFormSubmit} togglepops ={handletoggle}/>}\r\n      <Sidebar storedData={{ storedData }} onDataClick={handleNoteSelection} togglepop ={handletoggle} />\r\n      <Notesadder selectedX={selectedX} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Notes;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAACC,SAAS,QAAQ,OAAO;AACjD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,OAAO,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC;IAAEa,CAAC,EAAE,EAAE;IAAEC,CAAC,EAAE;EAAG,CAAC,CAAC;EAC5D,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMiB,mBAAmB,GAAGA,CAAC;IAAEJ,CAAC;IAAEC;EAAE,CAAC,KAAK;IACxCF,YAAY,CAAC;MAAEC,CAAC;MAAEC;IAAE,CAAC,CAAC;EACxB,CAAC;EAED,MAAMI,gBAAgB,GAAGA,CAAC;IAAEC,SAAS;IAAEC;EAAc,CAAC,KAAK;IACzDV,aAAa,CAAC;MAAES,SAAS;MAAEC;IAAc,CAAC,CAAC;EAC7C,CAAC;EACD,MAAMC,YAAY,GAAGA,CAAA,KAAM;IAEzBL,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;EACDd,SAAS,CAAC,MAAM;IACd,MAAMqB,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAEvD,IAAIF,cAAc,IAAI,IAAI,EAAE;MAC1B;MACAN,YAAY,CAAC,IAAI,CAAC;IACpB;EACF,CAAC,EAAE,EAAE,CAAC;EACN,oBACEV,OAAA;IAAKmB,SAAS,EAAC,UAAU;IAAAC,QAAA,GACtBX,SAAS,iBAAIT,OAAA,CAACH,KAAK;MAACwB,YAAY,EAAET,gBAAiB;MAACU,UAAU,EAAGP;IAAa;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACjF1B,OAAA,CAACF,OAAO;MAACK,UAAU,EAAE;QAAEA;MAAW,CAAE;MAACwB,WAAW,EAAEhB,mBAAoB;MAACiB,SAAS,EAAGb;IAAa;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnG1B,OAAA,CAACJ,UAAU;MAACS,SAAS,EAAEA;IAAU;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEV;AAACxB,EAAA,CA9BQD,KAAK;AAAA4B,EAAA,GAAL5B,KAAK;AAgCd,eAAeA,KAAK;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}