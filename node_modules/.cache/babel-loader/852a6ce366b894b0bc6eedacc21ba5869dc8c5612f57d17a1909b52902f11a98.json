{"ast":null,"code":"var _jsxFileName = \"E:\\\\Cuvette\\\\ReactModuleTestH\\\\noteapp\\\\src\\\\components\\\\Notesadder.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../css/noteadder.css\";\nimport arrow from \"../assets/arrowback.svg\";\nimport send from \"../assets/send.svg\";\nimport bg from \"../assets/bg.png\";\nimport lock from \"../assets/lock.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Notesadder = ({\n  selectedX\n}) => {\n  _s();\n  const [note, setNote] = useState(\"\"); // single note\n  const [notes, setNotes] = useState([]); // array\n  const [key, setKey] = useState(\"\"); // State to manage the key\n  const [yValue, setYValue] = useState(\"\");\n  const screenWidth = window.innerWidth;\n  // Function to handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (note.trim() !== \"\") {\n      const currentDate = new Date();\n      const formattedDate = currentDate.toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\"\n      });\n      const formattedTime = currentDate.toLocaleString(\"en-US\", {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        hour12: true\n      });\n      const timestamp = `${formattedDate} ${formattedTime}`;\n      const newNote = {\n        text: note,\n        timestamp: timestamp\n      };\n\n      // Save the note in local storage\n      const storedNotesInfo = JSON.parse(localStorage.getItem(\"NotesInfo\")) || {};\n\n      // Check if the key already exists, if not, initialize an empty object\n      if (!storedNotesInfo[key]) {\n        storedNotesInfo[key] = {\n          infogn: {},\n          notesgn: []\n        };\n      }\n\n      // Ensure that \"notesgn\" is an array and add the new note\n      if (!Array.isArray(storedNotesInfo[key].notesgn)) {\n        storedNotesInfo[key].notesgn = [newNote];\n      } else {\n        storedNotesInfo[key].notesgn.push(newNote);\n      }\n      localStorage.setItem(\"NotesInfo\", JSON.stringify(storedNotesInfo)); // store the array back to local storage\n\n      setNotes([...notes, newNote]);\n      setNote(\"\");\n    }\n  };\n  useEffect(() => {\n    const storedNotesInfo = JSON.parse(localStorage.getItem(\"NotesInfo\")) || {};\n    console.log(\"selectedX.x:\", selectedX.x);\n    // Check if the key (selectedX.x) already exists, and if so, load the notes for that key\n    if (storedNotesInfo[selectedX.x] && Array.isArray(storedNotesInfo[selectedX.x].notesgn)) {\n      setNotes(storedNotesInfo[selectedX.x].notesgn);\n    } else {\n      setNotes([]); // Initialize with an empty array if the key doesn't exist or notesgn is not an array\n      setKey(null);\n    }\n    setKey(selectedX.x);\n    setYValue(selectedX.y);\n  }, [selectedX]);\n  const handlearrow = () => {\n    const popupbody = document.querySelector(\".noteaddermainbody\"); //enable notesadder\n    const sideb = document.querySelector(\".Sidebarmain\"); //disable sidebar notesadder\n    console.log(\"Clearing key...\");\n    setKey(\"\");\n    if (screenWidth < 701) {\n      sideb.style.display = 'block';\n      popupbody.style.display = 'none';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"noteaddermainbody\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bydeftextarea\",\n      children: [key === \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bydeftextarea1\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: bg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Pocket Notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Send and receive messages without keeping your phone online. Use Pocket Notes on up to 4 linked devices and 1 mobile phone\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              position: \"absolute\",\n              bottom: \"10px\",\n              left: \"44%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: lock,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"lable\", {\n              style: {\n                fontSize: \"large\",\n                marginLeft: \"5px\",\n                fontWeight: \"bolder\"\n              },\n              children: \"end-to-end encrypted\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 27\n      }, this), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notesadder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notesInfolist\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"arrowback notesadders\",\n          onClick: handlearrow,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            id: \"imgarr\",\n            src: arrow\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"initials\",\n          style: {\n            backgroundColor: `${selectedX.y}`\n          },\n          children: selectedX.x.slice(0, 2).toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"initialsff\",\n          children: key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Notesadd\",\n      children: notes.map((note, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timeandnotes\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timeaddernone\",\n          children: note.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timeadder\",\n          children: note.timestamp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"formofnotes\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"notestext\",\n        type: \"textarea\",\n        placeholder: \"Enter your text here...\",\n        value: note,\n        onChange: e => setNote(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"notesbutton\",\n        type: \"submit\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: send\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(Notesadder, \"Ho8DXTOtEje799AhfJe8xHPn/VM=\");\n_c = Notesadder;\nexport default Notesadder;\nvar _c;\n$RefreshReg$(_c, \"Notesadder\");","map":{"version":3,"names":["React","useState","useEffect","arrow","send","bg","lock","jsxDEV","_jsxDEV","Notesadder","selectedX","_s","note","setNote","notes","setNotes","key","setKey","yValue","setYValue","screenWidth","window","innerWidth","handleSubmit","e","preventDefault","trim","currentDate","Date","formattedDate","toLocaleDateString","year","month","day","formattedTime","toLocaleString","hour","minute","hour12","timestamp","newNote","text","storedNotesInfo","JSON","parse","localStorage","getItem","infogn","notesgn","Array","isArray","push","setItem","stringify","console","log","x","y","handlearrow","popupbody","document","querySelector","sideb","style","display","className","children","src","fileName","_jsxFileName","lineNumber","columnNumber","position","bottom","left","alt","fontSize","marginLeft","fontWeight","onClick","id","backgroundColor","slice","toUpperCase","map","index","onSubmit","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["E:/Cuvette/ReactModuleTestH/noteapp/src/components/Notesadder.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../css/noteadder.css\";\r\nimport arrow from \"../assets/arrowback.svg\";\r\nimport send from \"../assets/send.svg\";\r\nimport bg from \"../assets/bg.png\";\r\nimport lock from \"../assets/lock.svg\";\r\n\r\nconst Notesadder = ({ selectedX }) => {\r\n  const [note, setNote] = useState(\"\"); // single note\r\n  const [notes, setNotes] = useState([]); // array\r\n  const [key, setKey] = useState(\"\"); // State to manage the key\r\n  const [yValue, setYValue] = useState(\"\");\r\n  const screenWidth = window.innerWidth;\r\n  // Function to handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (note.trim() !== \"\") {\r\n      const currentDate = new Date();\r\n      const formattedDate = currentDate.toLocaleDateString(\"en-US\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"numeric\",\r\n      });\r\n      const formattedTime = currentDate.toLocaleString(\"en-US\", {\r\n        hour: \"numeric\",\r\n        minute: \"numeric\",\r\n        hour12: true,\r\n      });\r\n\r\n \r\n\r\n      const timestamp = `${formattedDate} ${formattedTime}`;\r\n\r\n      const newNote = { text: note, timestamp: timestamp };\r\n\r\n      // Save the note in local storage\r\n      const storedNotesInfo =\r\n        JSON.parse(localStorage.getItem(\"NotesInfo\")) || {};\r\n\r\n      // Check if the key already exists, if not, initialize an empty object\r\n      if (!storedNotesInfo[key]) {\r\n        storedNotesInfo[key] = { infogn: {}, notesgn: [] };\r\n      }\r\n\r\n      // Ensure that \"notesgn\" is an array and add the new note\r\n      if (!Array.isArray(storedNotesInfo[key].notesgn)) {\r\n        storedNotesInfo[key].notesgn = [newNote];\r\n      } else {\r\n        storedNotesInfo[key].notesgn.push(newNote);\r\n      }\r\n\r\n      localStorage.setItem(\"NotesInfo\", JSON.stringify(storedNotesInfo)); // store the array back to local storage\r\n\r\n      setNotes([...notes, newNote]);\r\n      setNote(\"\");\r\n    }\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    const storedNotesInfo = JSON.parse(localStorage.getItem(\"NotesInfo\")) || {};\r\n    console.log(\"selectedX.x:\", selectedX.x);\r\n    // Check if the key (selectedX.x) already exists, and if so, load the notes for that key\r\n    if (\r\n      storedNotesInfo[selectedX.x] &&\r\n      Array.isArray(storedNotesInfo[selectedX.x].notesgn)\r\n    ) {\r\n      setNotes(storedNotesInfo[selectedX.x].notesgn);\r\n    } else {\r\n      setNotes([]); // Initialize with an empty array if the key doesn't exist or notesgn is not an array\r\n      setKey(null);\r\n    }\r\n    setKey(selectedX.x);\r\n    setYValue(selectedX.y);\r\n  }, [selectedX]);\r\n  const handlearrow = () => {\r\n    const popupbody = document.querySelector(\".noteaddermainbody\"); //enable notesadder\r\n    const sideb = document.querySelector(\".Sidebarmain\"); //disable sidebar notesadder\r\n    console.log(\"Clearing key...\");\r\n    setKey(\"\");\r\n    if (screenWidth < 701) {   \r\n      sideb.style.display = 'block';\r\n      popupbody.style.display = 'none';\r\n     }\r\n    \r\n  };\r\n  return (\r\n    <div className=\"noteaddermainbody\">\r\n      \r\n      <div className=\"bydeftextarea\">\r\n          {key === \"\" && (<div className=\"bydeftextarea1\" >\r\n          <div className=\"bg-info\">\r\n            <img src={bg} />\r\n            <h1>Pocket Notes</h1>\r\n            <h2>\r\n              Send and receive messages without keeping your phone online. Use\r\n              Pocket Notes on up to 4 linked devices and 1 mobile phone\r\n            </h2>\r\n            <span style={{ position: \"absolute\", bottom: \"10px\", left: \"44%\" }}>\r\n              <img src={lock} alt=\"\" />{\" \"}\r\n              <lable\r\n                style={{\r\n                  fontSize: \"large\",\r\n                  marginLeft: \"5px\",\r\n                  fontWeight: \"bolder\",\r\n                }}\r\n              >\r\n                end-to-end encrypted\r\n              </lable>\r\n            </span>\r\n          </div>\r\n          </div>)};\r\n          </div>\r\n      \r\n      <div className=\"notesadder\">\r\n        <div className=\"notesInfolist\">\r\n          <div className=\"arrowback notesadders\" onClick={handlearrow}>\r\n            <img id = \"imgarr\" src={arrow} />\r\n          </div>\r\n          <div\r\n            className=\"initials\"\r\n            style={{ backgroundColor: `${selectedX.y}` }}\r\n          >\r\n            {selectedX.x.slice(0, 2).toUpperCase()}\r\n          </div>\r\n          <div className=\"initialsff\">{key}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"Notesadd\">\r\n        {notes.map((note, index) => (\r\n          <div className=\"timeandnotes\" key={index}>\r\n           \r\n            <div className=\"timeaddernone\">{note.text}</div>\r\n            <div className=\"timeadder\">{note.timestamp}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form onSubmit={handleSubmit} className=\"formofnotes\">\r\n        <textarea\r\n          className=\"notestext\"\r\n          type=\"textarea\"\r\n          placeholder=\"Enter your text here...\"\r\n          value={note}\r\n          onChange={(e) => setNote(e.target.value)}\r\n        />\r\n        <button className=\"notesbutton\" type=\"submit\">\r\n          <img src={send} />\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notesadder;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}